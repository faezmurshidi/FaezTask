"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./src/lib/electronAPI.ts":
/*!********************************!*\
  !*** ./src/lib/electronAPI.ts ***!
  \********************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   electronAPI: () => (/* binding */ electronAPI)\n/* harmony export */ });\n// Wrapper functions for Electron API - types are defined in types/electron.ts\nconst electronAPI = {\n    // Check if we're running in Electron\n    isElectron: ()=> true && window.electronAPI,\n    // File operations\n    showOpenDialog: async (options)=>{\n        if (electronAPI.isElectron()) {\n            return window.electronAPI.showOpenDialog(options);\n        }\n        throw new Error('File operations are only available in Electron');\n    },\n    showSaveDialog: async (options)=>{\n        if (electronAPI.isElectron()) {\n            return window.electronAPI.showSaveDialog(options);\n        }\n        throw new Error('File operations are only available in Electron');\n    },\n    readFile: async (filePath)=>{\n        if (electronAPI.isElectron()) {\n            return window.electronAPI.readFile(filePath);\n        }\n        throw new Error('File operations are only available in Electron');\n    },\n    writeFile: async (filePath, content)=>{\n        if (electronAPI.isElectron()) {\n            return window.electronAPI.writeFile(filePath, content);\n        }\n        throw new Error('File operations are only available in Electron');\n    },\n    // Git operations\n    gitStatus: async (repoPath)=>{\n        if (electronAPI.isElectron()) {\n            return window.electronAPI.gitStatus(repoPath);\n        }\n        throw new Error('Git operations are only available in Electron');\n    },\n    gitInit: async (repoPath)=>{\n        if (electronAPI.isElectron()) {\n            return window.electronAPI.gitInit(repoPath);\n        }\n        throw new Error('Git operations are only available in Electron');\n    },\n    gitAdd: async (repoPath, files)=>{\n        if (electronAPI.isElectron()) {\n            return window.electronAPI.gitAdd(repoPath, files);\n        }\n        throw new Error('Git operations are only available in Electron');\n    },\n    gitCommit: async (repoPath, message)=>{\n        if (electronAPI.isElectron()) {\n            return window.electronAPI.gitCommit(repoPath, message);\n        }\n        throw new Error('Git operations are only available in Electron');\n    },\n    gitPush: async (repoPath, remote, branch)=>{\n        if (electronAPI.isElectron()) {\n            return window.electronAPI.gitPush(repoPath, remote, branch);\n        }\n        throw new Error('Git operations are only available in Electron');\n    },\n    gitPushUpstream: async (repoPath, remote, branch)=>{\n        if (electronAPI.isElectron()) {\n            return window.electronAPI.gitPushUpstream(repoPath, remote, branch);\n        }\n        throw new Error('Git operations are only available in Electron');\n    },\n    gitPullAndPush: async (repoPath, remote, branch)=>{\n        if (electronAPI.isElectron()) {\n            return window.electronAPI.gitPullAndPush(repoPath, remote, branch);\n        }\n        throw new Error('Git operations are only available in Electron');\n    },\n    gitPull: async (repoPath, remote, branch)=>{\n        if (electronAPI.isElectron()) {\n            return window.electronAPI.gitPull(repoPath, remote, branch);\n        }\n        throw new Error('Git operations are only available in Electron');\n    },\n    gitAddRemote: async (repoPath, name, url)=>{\n        if (electronAPI.isElectron()) {\n            return window.electronAPI.gitAddRemote(repoPath, name, url);\n        }\n        throw new Error('Git operations are only available in Electron');\n    },\n    gitGetRemotes: async (repoPath)=>{\n        if (electronAPI.isElectron()) {\n            return window.electronAPI.gitGetRemotes(repoPath);\n        }\n        throw new Error('Git operations are only available in Electron');\n    },\n    gitGetLog: async (repoPath, options)=>{\n        if (electronAPI.isElectron()) {\n            return window.electronAPI.gitGetLog(repoPath, options);\n        }\n        throw new Error('Git operations are only available in Electron');\n    },\n    // Project operations - these are now properly available in the current preload\n    getProjects: async ()=>{\n        if (electronAPI.isElectron()) {\n            return window.electronAPI.getProjects();\n        }\n        // Fallback for web development\n        return [];\n    },\n    createProject: async (projectData)=>{\n        if (electronAPI.isElectron()) {\n            return window.electronAPI.createProject(projectData);\n        }\n        throw new Error('Project operations are only available in Electron');\n    },\n    updateProject: async (projectId, updates)=>{\n        if (electronAPI.isElectron()) {\n            return window.electronAPI.updateProject(projectId, updates);\n        }\n        throw new Error('Project operations are only available in Electron');\n    },\n    // Task operations - these are legacy and may not be available in current preload\n    getTasks: async (projectId)=>{\n        if (electronAPI.isElectron() && window.electronAPI.getTasks) {\n            return window.electronAPI.getTasks(projectId);\n        }\n        // Fallback for web development\n        return [];\n    },\n    createTask: async (taskData)=>{\n        if (electronAPI.isElectron() && window.electronAPI.createTask) {\n            return window.electronAPI.createTask(taskData);\n        }\n        throw new Error('Task operations are only available in Electron');\n    },\n    updateTask: async (taskId, updates)=>{\n        if (electronAPI.isElectron() && window.electronAPI.updateTask) {\n            return window.electronAPI.updateTask(taskId, updates);\n        }\n        throw new Error('Task operations are only available in Electron');\n    },\n    // Time tracking operations - these are legacy and may not be available in current preload\n    startTimer: async (taskId)=>{\n        if (electronAPI.isElectron() && window.electronAPI.startTimer) {\n            return window.electronAPI.startTimer(taskId);\n        }\n        throw new Error('Time tracking is only available in Electron');\n    },\n    stopTimer: async (entryId)=>{\n        if (electronAPI.isElectron() && window.electronAPI.stopTimer) {\n            return window.electronAPI.stopTimer(entryId);\n        }\n        throw new Error('Time tracking is only available in Electron');\n    },\n    getTimeEntries: async (projectId)=>{\n        if (electronAPI.isElectron() && window.electronAPI.getTimeEntries) {\n            return window.electronAPI.getTimeEntries(projectId);\n        }\n        // Fallback for web development\n        return [];\n    }\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/lib/electronAPI.ts\n"));

/***/ })

});